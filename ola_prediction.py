# -*- coding: utf-8 -*-
"""ola_prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1qDukjDAVMCri8i4Tbyl_IwCeQaZFYCbZ
"""

import pickle

import matplotlib.pyplot as plt
import pandas as pd
import seaborn as sns
from sklearn.datasets import load_iris
from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import train_test_split

train = pd.read_csv(r'train.csv')

train.head()

train.drop('casual', axis=1)

figure, axes = plt.subplots(nrows=2, ncols=2)
figure.set_size_inches(10, 10)
plt.tight_layout()

sns.boxplot(x='season', y='count', data=train, ax=axes[0, 0])
sns.boxplot(x='weather', y='count', data=train, ax=axes[0, 1])
sns.boxplot(x='holiday', y='count', data=train, ax=axes[1, 0])
sns.boxplot(x='workingday', y='count', data=train, ax=axes[1, 1])

figure, axes = plt.subplots(nrows=2, ncols=2)
figure.set_size_inches(7, 6)
plt.tight_layout()

sns.regplot(x='temp', y='count', data=train, ax=axes[0, 0], scatter_kws={'alpha': 0.1}, line_kws={'color': 'blue'})
sns.regplot(x='atemp', y='count', data=train, ax=axes[0, 1], scatter_kws={'alpha': 0.1}, line_kws={'color': 'blue'})
sns.regplot(x='windspeed', y='count', data=train, ax=axes[1, 0], scatter_kws={'alpha': 0.1}, line_kws={'color': 'blue'})
sns.regplot(x='humidity', y='count', data=train, ax=axes[1, 1], scatter_kws={'alpha': 0.1}, line_kws={'color': 'blue'})

iris = load_iris()
X = iris.data  # Independent variables
y = iris.target  # Dependent variable

corr = train[['temp', 'atemp', 'humidity', 'windspeed']].corr()

fig, ax = plt.subplots()
fig.set_size_inches(10, 10)
sns.heatmap(corr, annot=True)

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

model = LogisticRegression(max_iter=1000)  # max_iter is set to ensure convergence
model.fit(X_train, y_train)

train_score = model.score(X_train, y_train)
test_score = model.score(X_test, y_test)

print(f"Training accuracy: {train_score}")
print(f"Testing accuracy: {test_score}")

pickle.dump(model, open('mdl.pkl', 'wb'))
mdl = pickle.load(open('mdl.pkl', 'rb'))
